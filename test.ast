Ruleset = syntax.pegjs
source code = example4.chb
{
  type: 'Program',
  body: [
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'a' },
        right: { type: 'Literal', value: 'foo', class: 'String' }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'b' },
        right: { type: 'Literal', value: 'bar', class: 'String' }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'c' },
        right: {
          type: 'BinaryExpression',
          operator: '+',
          left: { type: 'Identifier', name: 'a' },
          right: { type: 'Identifier', name: 'b' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'd' },
        right: {
          type: 'BinaryExpression',
          operator: '+',
          left: { type: 'Literal', value: 1, class: 'Number' },
          right: { type: 'Literal', value: 5, class: 'Number' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'e' },
        right: {
          type: 'BinaryExpression',
          operator: '+',
          left: { type: 'Identifier', name: 'c' },
          right: { type: 'Identifier', name: 'd' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'f' },
        right: {
          type: 'BinaryExpression',
          operator: '>',
          left: { type: 'Literal', value: 3, class: 'Number' },
          right: { type: 'Literal', value: 4, class: 'Number' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'g' },
        right: {
          type: 'BinaryExpression',
          operator: '<',
          left: { type: 'Literal', value: 3, class: 'Number' },
          right: { type: 'Literal', value: 4, class: 'Number' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'h' },
        right: {
          type: 'BinaryExpression',
          operator: '<=',
          left: {
            type: 'BinaryExpression',
            operator: '+',
            left: { type: 'Literal', value: 1, class: 'Number' },
            right: {
              type: 'BinaryExpression',
              operator: '*',
              left: { type: 'Literal', value: 2, class: 'Number' },
              right: { type: 'Literal', value: 3, class: 'Number' }
            }
          },
          right: { type: 'Literal', value: 5, class: 'Number' }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'i' },
        right: {
          type: 'BinaryExpression',
          operator: '=',
          left: {
            type: 'BinaryExpression',
            operator: '/',
            left: { type: 'Literal', value: 8, class: 'Number' },
            right: { type: 'Literal', value: 4, class: 'Number' }
          },
          right: {
            type: 'BinaryExpression',
            operator: '/',
            left: { type: 'Literal', value: 18, class: 'Number' },
            right: { type: 'Literal', value: 9, class: 'Number' }
          }
        }
      }
    },
    {
      type: 'ExpressionStatement',
      expression: {
        type: 'AssignmentExpression',
        operator: '=',
        left: { type: 'Identifier', name: 'j' },
        right: {
          type: 'BinaryExpression',
          operator: '=',
          left: { type: 'Literal', value: '6', class: 'String' },
          right: { type: 'Identifier', name: 'd' }
        }
      }
    }
  ]
}
